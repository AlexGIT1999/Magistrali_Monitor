from datetime import datetime, timedelta
import logging
from typing import Any, Optional, Dict  

from src.utils.body_types import BODY_TYPE_TRANSLATION
from src.utils.cities_reference import CITIES_REFERENCE, find_city_in_address
from fuzzywuzzy import fuzz, process

logger = logging.getLogger(__name__)

def get_safe(dictionary: Any, keys: list, default: Any = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π"""
    if not isinstance(dictionary, dict):
        return default
        
    current = dictionary
    for key in keys:
        if not isinstance(current, dict):
            return default
        current = current.get(key)
        if current is None:
            return default
    return current

def format_timedelta(delta: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    
    if days > 0:
        return f"{days} –¥. {hours} —á. {minutes} –º–∏–Ω."
    elif hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    else:
        return f"{minutes} –º–∏–Ω."

def format_datetime(datetime_str: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    try:
        if not datetime_str or datetime_str == "N/A":
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
        dt = datetime.fromisoformat(datetime_str.replace("Z", "+00:00"))
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        logger.error(f"Error formatting datetime: {str(e)}")
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def extract_city_from_address(address: Optional[str]) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞"""
    if not address or not isinstance(address, str):
        return None
    
    parts = [part.strip() for part in address.split(",")]
    if parts:
        city_part = parts[0].split(" ")[0]
        return city_part
    
    return None

def fuzzy_find_city(address: Optional[str]) -> Optional[str]:
    """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –≤ –∞–¥—Ä–µ—Å–µ"""
    if not address or not isinstance(address, str):
        return None
    
    address_clean = address.lower().replace("–≥.", "").replace("–≥–æ—Ä–æ–¥", "").strip()
    cities = list(CITIES_REFERENCE.keys())
    result = process.extractOne(address_clean, cities, scorer=fuzz.token_set_ratio)
    
    if result and result[1] > 70:
        return CITIES_REFERENCE[result[0]]
    
    return None

def format_datetime_with_timezone(datetime_str: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    try:
        if not datetime_str or datetime_str == "N/A":
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
        dt = datetime.fromisoformat(datetime_str.replace("Z", "+00:00"))
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        logger.error(f"Error formatting datetime with timezone: {str(e)}")
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_timezone_from_datetime(datetime_str: Optional[str]) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã"""
    try:
        if not datetime_str or datetime_str == "N/A":
            return "—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
            
        if "Z" in datetime_str:
            return "UTC"
            
        if "+" in datetime_str:
            tz_part = datetime_str.split("+")[1]
            if ":" in tz_part:
                return f"UTC+{tz_part.split(':')[0]}"
            return f"UTC+{tz_part[:2]}"
            
        if "-" in datetime_str:
            tz_part = datetime_str.split("-")[1]
            if ":" in tz_part:
                return f"UTC-{tz_part.split(':')[0]}"
            return f"UTC-{tz_part[:2]}"
            
        return "—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
    except Exception as e:
        logger.error(f"Error determining timezone: {str(e)}")
        return "—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É–∫–∞–∑–∞–Ω"

def translate_body_types(body_types: list) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    if not body_types:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    
    translated = [BODY_TYPE_TRANSLATION.get(bt, bt) for bt in body_types]
    return ", ".join(translated) if translated else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"

def format_order_message(order: Dict[str, Any]) -> Optional[Dict[str, str]]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ —Å –Ω–µ—á–µ—Ç–∫–∏–º –ø–æ–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤"""
    try:
        if not isinstance(order, dict):
            raise ValueError("Invalid order format")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_id = get_safe(order, ["id"], "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        customer = get_safe(order, ["customer", "customerName"], "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        time_left = get_safe(order, ["auction", "timeLeft"], "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        
        # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        created_at = format_datetime(get_safe(order, ["createdAt", "time"]))
        updated_at = format_datetime(get_safe(order, ["updatedAt", "time"]))
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–∑–∞
        weight = get_safe(order, ["dimensions", "weight"], "–Ω–µ —É–∫–∞–∑–∞–Ω")
        volume = get_safe(order, ["dimensions", "volume"], "–Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞
        body_types = translate_body_types(get_safe(order, ["bodyType"], []))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
        currency = get_safe(order, ["auction", "currency"], "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        amount = get_safe(order, ["distribution", "amount"], "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        shipments = get_safe(order, ["shipments"], [])
        route_points = []
        loading_info = None
        unloading_infos = []

        if shipments:
            for shipment in shipments:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥—Ä—É–∑–∫–∏
                loading_address = get_safe(shipment, ["npShipment", "npGeoAddress", "address"])
                loading_city = fuzzy_find_city(loading_address) or extract_city_from_address(loading_address)
                loading_date = format_datetime_with_timezone(
                    get_safe(shipment, ["npShipment", "period", "from", "time"]))
                loading_tz = get_timezone_from_datetime(
                    get_safe(shipment, ["npShipment", "period", "from", "time"]))
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏
                unloading_address = get_safe(shipment, ["npUnshipment", "npGeoAddress", "address"])
                unloading_city = fuzzy_find_city(unloading_address) or extract_city_from_address(unloading_address)
                unloading_date = format_datetime_with_timezone(
                    get_safe(shipment, ["npUnshipment", "period", "from", "time"]))
                unloading_tz = get_timezone_from_datetime(
                    get_safe(shipment, ["npUnshipment", "period", "from", "time"]))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
                if loading_city and loading_city not in route_points:
                    route_points.append(loading_city)
                    loading_info = {
                        "city": loading_city,
                        "date": loading_date,
                        "timezone": loading_tz
                    }
                
                if unloading_city and unloading_city not in route_points:
                    route_points.append(unloading_city)
                    unloading_infos.append({
                        "city": unloading_city,
                        "date": unloading_date,
                        "timezone": unloading_tz
                    })

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        route_str = " - ".join(route_points) if route_points else "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = [
            "üöõ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–æ—Ä–≥–∞—Ö",
            "",
            f"‚ñ™Ô∏è –ó–∞–∫–∞–∑—á–∏–∫: {customer}",
            f"‚ñ™Ô∏è –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤: {time_left}",
            f"‚ñ™Ô∏è –ó–∞—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ –ù–î–°): {amount} {currency}",
            "",
            "üì¶ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–µ—Ä–µ–≤–æ–∑–∫–µ",
            f"‚ñ´Ô∏è –ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å: {weight} –∫–≥",
            f"‚ñ´Ô∏è –û–±—ä–µ–º: {volume} –º¬≥",
            f"‚ñ´Ô∏è –¢–∏–ø –∫—É–∑–æ–≤–∞: {body_types}",
            "",
            f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route_str}"
        ]

        if loading_info:
            message_lines.append(
                f"‚ñ´Ô∏è –ü–æ–≥—Ä—É–∑–∫–∞ –≤ {loading_info['city']}: "
                f"{loading_info['date']} ({loading_info['timezone']})"
            )

        for unloading_info in unloading_infos:
            message_lines.append(
                f"‚ñ´Ô∏è –í—ã–≥—Ä—É–∑–∫–∞ –≤ {unloading_info['city']}: "
                f"{unloading_info['date']} ({unloading_info['timezone']})"
            )

        return {
            "text": "\n".join(message_lines),
            "order_id": order_id
        }

    except Exception as e:
        logger.error(f"Error formatting order: {str(e)}")
        return None